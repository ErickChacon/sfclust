% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/log_mlik_each_function_updated.R,
%   R/model-within.R
\name{log_mlik_each}
\alias{log_mlik_each}
\title{Evaluate Log Marginal Likelihood for Each Cluster Using INLA}
\usage{
log_mlik_each(
  k,
  Y,
  membership,
  X = NULL,
  N = NULL,
  formula = Yk ~ 1 + Xk,
  family = "normal",
  correction = FALSE,
  detailed = FALSE,
  ...
)

log_mlik_each(
  k,
  Y,
  membership,
  X = NULL,
  N = NULL,
  formula = Yk ~ 1 + Xk,
  family = "normal",
  correction = FALSE,
  detailed = FALSE,
  ...
)
}
\arguments{
\item{k}{Integer, the cluster index for which to compute the log marginal likelihood.}

\item{Y}{Numeric vector or matrix, representing the response variable(s) in the model.}

\item{membership}{Integer vector, indicating the cluster membership of each observation.}

\item{X}{Numeric matrix or NULL, optional covariates for the model; defaults to NULL if not provided.}

\item{N}{Numeric vector or NULL, representing the number of trials or exposures for each observation (necessary for binomial and Poisson models); defaults to NULL.}

\item{formula}{Object of class \code{\link[stats]{formula}}, specifying the model to be fitted; defaults to \code{Yk ~ 1 + Xk}.}

\item{family}{Character string specifying the family of the model, with support for "normal", "poisson", "binomial", and "nbinomial" (negative binomial variant 1); defaults to "normal".}

\item{correction}{Logical, indicating whether a correction should be applied to the computed log marginal likelihood; defaults to FALSE.}

\item{detailed}{Logical, specifying whether to return the full model object or just the log marginal likelihood; defaults to FALSE.}

\item{...}{Additional arguments passed to the INLA function.}

\item{stars_obj}{A stars object containing spatial data, including covariates and response variables.}
}
\value{
Depending on the \code{detailed} parameter:
\itemize{
\item If \code{detailed} is TRUE, returns the full \code{INLA} model object.
\item If \code{detailed} is FALSE, returns the log marginal likelihood (corrected if \code{correction} is TRUE).
}

Depending on the \code{detailed} parameter:
\itemize{
\item If \code{detailed} is TRUE, returns the full \code{INLA} model object.
\item If \code{detailed} is FALSE, returns the log marginal likelihood (corrected if \code{correction} is TRUE).
}
}
\description{
This function computes the log marginal likelihood for a specific cluster \code{k} within a dataset.
It supports multiple family distributions and allows for the inclusion of exposure or trial sizes if applicable.
The function is flexible, accepting custom formulas and additional arguments for the INLA model fitting.

This function computes the log marginal likelihood for a specific cluster \code{k} within a dataset. It supports multiple family distributions and allows for the inclusion of exposure or trial sizes if applicable. The function is flexible, accepting custom formulas and additional arguments for the INLA model fitting.
}
\examples{
\dontrun{
stars_obj <- create_stars_object(...)
membership <- sample(1:2, 10, replace = TRUE)
formula <- Y ~ temperature + precipitation + f(ids, model = "iid")
result <- log_mlik_each(1, stars_obj, membership, formula = formula, family = "poisson", correction = TRUE)
}
\dontrun{
# Define data matrices and parameters
Y <- matrix(rpois(100, lambda = 10), ncol = 10)
population <- matrix(rpois(100, lambda = 5), ncol = 10)
inla.extra <- list(family = "poisson", N = population)
membership <- sample(1:2, 10, replace = TRUE)
X <- seq(0, 1, length.out = 10)
a0 <- 0.1
b0 <- 0.1

# Define a formula, the name of the iid random effec should be idx
formula <- Yk ~ 1 + Xk + f(
  idx,
  model <- "iid",
  hyper <- list(prec = list(prior = "loggamma", param = c(a0, b0)))
)
formula <- Yk ~ 1 + Xk + f(idx, model = "iid", hyper = list(prec = list(prior = "loggamma", param = c(a0, b0))))
formula <- Yk~ 1 + f(Xk, model = "rw1", scale.model = TRUE, hyper = list(theta = list(prior = "pc.prec", param = c(1, 0.01)))) +
  f(idx, model = "iid", hyper = list(prec = list(prior = "loggamma", param = c(a0, b0))))
formula <- Yk ~ 1 + f(ids, model = "iid", group = idt, control.group = list(model = "ar1"), hyper = list(prec = list(prior = "loggamma", param = c(a0, b0))))
# Call the function
result <- log_mlik_each(1, Y, X, inla.extra, membership, custom_formula, TRUE)
}
}
