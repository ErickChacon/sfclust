% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/main_function.R
\name{Fun_Wave_Clust}
\alias{Fun_Wave_Clust}
\title{Detect Spatial Functional Clusters Based on Bayesian Spanning Tree}
\usage{
Fun_Wave_Clust(
  data,
  formula,
  inla.extra,
  graph0,
  init_val,
  hyperpar,
  MCMC,
  BURNIN,
  THIN,
  path_save,
  seed = 1234
)
}
\arguments{
\item{data}{A list containing the matrices 'Y' and 'X', where 'Y' is the matrix of observations
and 'X' is the matrix of covariates or design matrix.}

\item{formula}{An object of class \code{\link[stats]{formula}} specifying the model used in INLA.}

\item{inla.extra}{Additional parameters or data needed for running the INLA model.}

\item{graph0}{Initial spanning tree used for the Bayesian model.}

\item{init_val}{List of initial values for the parameters 'trees', 'beta', and 'cluster'.}

\item{hyperpar}{List containing hyperparameters used in the model.}

\item{MCMC}{Integer, number of MCMC iterations to perform.}

\item{BURNIN}{Integer, number of burn-in iterations to discard.}

\item{THIN}{Integer, thinning interval for recording the results.}

\item{path_save}{Character, the path where results should be saved.}

\item{seed}{Integer, seed value for random number generation, defaults to 1234.}
}
\value{
The function saves the MCMC outputs directly to the path specified by 'path_save'.
It returns an invisible NULL explicitly, as the main results are saved on disk.
}
\description{
This function implements a Reversible Jump Markov Chain Monte Carlo (RJMCMC) algorithm
for detecting spatial functional clusters based on a Bayesian analysis of spanning trees.
It handles various types of moves including birth, death, change, and hyperparameter updates
to explore the space of possible cluster configurations.
}
\examples{
# Example setup (note: actual data and parameters need to be defined)
\dontrun{
data <- list(Y = matrix(rnorm(100), ncol=10), X = matrix(rnorm(100), ncol=10))
formula <- Y ~ X1 + X2
inla.extra <- list(correction = TRUE)
graph0 <- matrix(sample(0:1, 100, replace=TRUE), ncol=10)
init_val <- list(trees = graph0, beta = runif(10), cluster = sample(1:5, 10, replace=TRUE))
hyperpar <- list(c = 0.5)
path_save <- "path/to/save/results/"

Fun_Wave_Clust(data, formula, inla.extra, graph0, init_val, hyperpar, MCMC = 10000, BURNIN = 5000, THIN = 10, path_save)
}
}
