[{"path":"/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2025 Erick . Chac√≥n-Montalv√°n, Ruiman Zhong, Paula Moraga Permission hereby granted, free charge, person obtaining copy software associated documentation files (‚ÄúSoftware‚Äù), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED ‚Äú‚Äù, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"/articles/sfclust.html","id":"packages","dir":"Articles","previous_headings":"","what":"Packages","title":"Introduction to sfclust","text":"begin loading required packages. particular, load stars package sfclust package works spacio-temporal stars objects.","code":"library(sfclust) library(stars) library(ggplot2) library(dplyr)"},{"path":"/articles/sfclust.html","id":"data","dir":"Articles","previous_headings":"","what":"Data","title":"Introduction to sfclust","text":"simulated dataset used vignette, stbinom, included package. stars object two variables, cases population, two dimensions, geometry time. dataset represents number cases 100 regions, observed daily 91 days, starting January 2024. can easily visualize spatio-temporal risk using ggplot stars::geom_stars. shows neightboring regions similar risk patterns time.  can aggregate data easier visualization using stars::aggregate function. following figure displays weekly mean risk, providing initial insights. figure displays daily risk, providing initial insights. example, northwestern regions show higher risk beginning (2024-01-01), followed decline March 24. contrast, group regions eastern side exhibits high risk beginning (2024-01-01) end (2024-03-25) lower values middle study period (2024-02-12). also useful examine trends region. can done converting stars object data frame using stars::as_tibble function. visualization reveals regions exhibit similar trends time. goal cluster regions considering spatial contiguity.","code":"data(\"stbinom\") ggplot() +     geom_stars(aes(fill = cases/population), data = stbinom) +     facet_wrap(~ time) +     scale_fill_distiller(palette = \"RdBu\") +     labs(title = \"Daily risk\", fill = \"Risk\") +     theme_bw(base_size = 7) +     theme(legend.position = \"bottom\") stbinom |>   st_set_dimensions(\"geometry\", values = 1:nrow(stbinom)) |>   as_tibble() |>   ggplot() +     geom_line(aes(time, cases/population, group = geometry), linewidth = 0.3) +     theme_bw() +     labs(title = \"Risk per region\", y = \"Risk\", x = \"Time\")"},{"path":[]},{"path":"/articles/sfclust.html","id":"model","dir":"Articles","previous_headings":"Clustering","what":"Model","title":"Introduction to sfclust","text":"model-based approach spatial clustering requires defining within-cluster model, regions within cluster share common parameters latent functions. example, given clustering partition MM, assume observed number cases (yity_{}) region ii time tt realization Binomial random variable YitY_{} size NitN_{} success probability pitp_{}: Yit‚à£pit,Nit,M‚àºindBinomial(pit,Nit). Y_{} \\mid p_{}, N_{}, M \\stackrel{ind}{\\sim} \\text{Binomial}(p_{},N_{}). Based exploratory analysis, success probability pitp_{} modeled : logit(pit)=Œ±ci+ùê±tTùõÉci+fit, \\text{logit}(p_{}) =  \\alpha_{c_i} + \\boldsymbol{x}_{t}^T\\boldsymbol{\\beta}_{c_i} + f_{},  Œ±ci\\alpha_{c_i} intercept cluster cic_i, ùê±t\\boldsymbol{x}_{t} represents set polynomial functions time capture global trends cluster-specific effect ùõÉci\\boldsymbol{\\beta}_{c_i}. Additionally, include independent random effect, fit‚àºiidNormal(0,œÉci)f_{} \\stackrel{iid}{\\sim} \\text{Normal}(0, \\sigma_{c_i}), account extra space-time variability. Since perform Bayesian inference, impose prior distributions model parameters. intercept Œ±ci\\alpha_{c_i} regression coefficients ùõÉci\\boldsymbol{\\beta}_{c_i} follow Normal distribution, prior hyperparameter œÉci\\sigma_{c_i} defined : log(1/œÉci)‚àºLogGamma(1,10‚àí5). \\log(1/\\sigma_{c_i}) \\sim \\text{LogGamma}(1, 10^{-5}).  Notably, regions within cluster share parameters: Œ±ci\\alpha_{c_i}, regression coefficients ùõÉci\\boldsymbol{\\beta}_{c_i}, random-effect standard deviation œÉci\\sigma_{c_i}.","code":""},{"path":"/articles/sfclust.html","id":"sampling-with-sfclust","dir":"Articles","previous_headings":"Clustering","what":"Sampling with sfclust","title":"Introduction to sfclust","text":"order perform Bayesian spatial functional clustering model use main function sfclust. main arguments function : stdata: spatio-temporal data stars object. stnames: Names spatial time dimensions respectively (default: c(\"geometry\", \"time\")). niter: Number iteration Markov chain Monte Carlo algorithm. Notice given sfclust uses MCMC INLA perform Bayesian inference, accepts argument INLA::inla function. main arguments : formula: expression define model fixed random effects. sfclust pre-process data create identifiers regions ids, times idt space-time id. can incluse identifiers formula. family: distribution response variable. Ntrials: Number trials case Binomial response. E: Expected number cases Poisson response. following code perform Bayesian function clustering model explained 2000 iterations. returning object class sfclust, list two elements: samples: list containing membership samples, logarithm marginal likelihood log_mlike clustering movements move_counts done total. clust: list containing selecting membership samples. include id selected sample, selected membership models associated cluster.","code":"set.seed(7) result <- sfclust(stbinom, formula = cases ~ poly(time, 2) + f(id),   family = \"binomial\", Ntrials = population, niter = 2000) names(result) #> [1] \"samples\" \"clust\""},{"path":[]},{"path":"/articles/sfclust.html","id":"print","dir":"Articles","previous_headings":"Basic methods","what":"Print","title":"Introduction to sfclust","text":"default, sfclust object prints within-cluster model, clustering hyperparameters, movements counts, current log marginal likelihood. output indicates within-cluster model specified using formula cases ~ poly(time, 2) + f(id), compatible INLA. formula includes polynomial fixed effects independent random effect per observation. displayed hyperparameters used clustering algorithm. hyperparameter log(1-q) = 0.5 penalizes increase clusters, parameters control probabilities different clustering movements: probability splitting cluster 0.425. probability merging two clusters 0.425. probability simultaneously splitting merging two clusters 0.1. probability modifying minimum spanning tree 0.05. Users can modify hyperparameters needed. output also displays clustering movements. output summary indicates following: Clusters splited 60 times. Clusters merged 60 times. Clusters simultaneously split merged 17 times. minimum spanning tree updated 90 times. Finally, log marginal likelihood last iteration (2000) reported -61,286.28.","code":"result #> Within-cluster formula: #> cases ~ poly(time, 2) + f(id) #>  #> Clustering hyperparameters: #>   log(1-q)      birth      death     change      hyper  #> -0.6931472  0.4250000  0.4250000  0.1000000  0.0500000  #>  #> Clustering movement counts: #>  births  deaths changes  hypers  #>      60      60      17      90  #>  #> Log marginal likelihood (sample 2000 out of 2000): -61286.28"},{"path":"/articles/sfclust.html","id":"plot","dir":"Articles","previous_headings":"Basic methods","what":"Plot","title":"Introduction to sfclust","text":"plot method generates three main graphs: map regions colored clusters. mean function per cluster. marginal likelihood iteration. example, left panel displays regions grouped 10 clusters found 2000th (final) iteration. middle panel shows mean linear predictor curves cluster. clusters exhibit linear trends, others follow quadratic trends. Although clusters similar mean trends, classified separately due differences parameters, variance random effects. Finally, right panel presents marginal likelihood iteration. values stabilize around iteration 1500, indicating clustering beyond point can considered reasonable realization clustering distribution.","code":"plot(result, sort = TRUE, legend = TRUE)"},{"path":"/articles/sfclust.html","id":"summary","dir":"Articles","previous_headings":"Basic methods","what":"Summary","title":"Introduction to sfclust","text":"convergence observed clustering algorithm, can summarize results. default, summary based last sample. output summary method confirms corresponds 2000th sample total 2000. also displays model formula, similar print method. Additionally, summary provides number members cluster. example, case, Cluster 1 27 members, Cluster 2 12 members, . Finally, reports associated log-marginal likelihood. can also summarize sample, 500th iteration. output clearly indicates log-marginal likelihood much smaller case. Keep mind sfclust methods use last sample default, can specify different sample needed. Cluster labels assigned arbitrarily, can relabeled based number members using option sort = TRUE. following output shows , last sample, first seven clusters four members, last three clusters fewer four members.","code":"summary(result) #> Summary for clustering sample 2000 out of 2000  #>  #> Within-cluster formula: #> cases ~ poly(time, 2) + f(id) #>  #> Counts per cluster: #>  1  2  3  4  5  6  7  8  9 10  #> 27 12  9  9 11 20  6  1  2  3  #>  #> Log marginal likelihood:  -61286.28 summary(result, sample = 500) #> Summary for clustering sample 500 out of 2000  #>  #> Within-cluster formula: #> cases ~ poly(time, 2) + f(id) #>  #> Counts per cluster: #>  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15  #> 26 12  9  8 11  4 16  1  5  1  2  1  2  1  1  #>  #> Log marginal likelihood:  -61439.52 summary(result, sort = TRUE) #> Summary for clustering sample 2000 out of 2000  #>  #> Within-cluster formula: #> cases ~ poly(time, 2) + f(id) #>  #> Counts per cluster: #>  1  2  3  4  5  6  7  8  9 10  #> 27 20 12 11  9  9  6  3  2  1  #>  #> Log marginal likelihood:  -61286.28"},{"path":"/articles/sfclust.html","id":"fitted-values","dir":"Articles","previous_headings":"Basic methods","what":"Fitted values","title":"Introduction to sfclust","text":"can obtain estimated values model using fitted function, returns stars object format original data. provides mean, standard deviation, quantiles, summary statistics. can easily visualize fitted values. Note still differences regions within cluster due presence random effects individual level.  gain insights, can compute mean fitted values per cluster using aggregate = TRUE. returns stars object cluster-level geometries. Using estimates, can visualize cluster-level mean risk evolution time.  Finally, can use clustering results visualize original data grouped clusters using function plot_clusters_series(). output ggplot object, can easily customize output follows:  Even though clusters exhibit similar trends‚Äîexample, clusters 2 6‚Äîvariability differs, justifies classification separate clusters.","code":"pred <- fitted(result) pred #> stars object with 2 dimensions and 5 attributes #> attribute(s): #>                         Min.    1st Qu.        Median          Mean   3rd Qu. #> mean              -0.7055731 -0.1988638 -0.0055543163 -0.0004677087 0.1850758 #> mean_inv           0.3305778  0.4504473  0.4986114245  0.4998542289 0.5461373 #> cluster            1.0000000  1.0000000  4.0000000000  3.8700000000 6.0000000 #> mean_cluster      -0.5011533 -0.1986104  0.0001815312 -0.0004677297 0.1898616 #> mean_cluster_inv   0.3772697  0.4505100  0.5000453828  0.4998533938 0.5473233 #>                         Max. #> mean               0.6887139 #> mean_inv           0.6656808 #> cluster           10.0000000 #> mean_cluster       0.5015424 #> mean_cluster_inv   0.6228217 #> dimension(s): #>          from  to     offset  delta refsys point #> geometry    1 100         NA     NA     NA FALSE #> time        1  91 2024-01-01 1 days   Date FALSE #>                                                                 values #> geometry POLYGON ((59.5033 683.285...,...,POLYGON ((942.7562 116.89... #> time                                                              NULL ggplot() +     geom_stars(aes(fill = mean_inv), data = pred) +     facet_wrap(~ time) +     scale_fill_distiller(palette = \"RdBu\") +     labs(title = \"Daily risk\", fill = \"Risk\") +     theme_bw(base_size = 7) +     theme(legend.position = \"bottom\") pred <- fitted(result, sort = TRUE, aggregate = TRUE) ggplot() +     geom_stars(aes(fill = mean_cluster_inv), data = pred) +     facet_wrap(~ time) +     scale_fill_distiller(palette = \"RdBu\") +     labs(title = \"Daily risk\", fill = \"Risk\") +     theme_bw(base_size = 7) +     theme(legend.position = \"bottom\") plot_clusters_series(result, cases/population, sort = TRUE) +   facet_wrap(~ cluster, ncol = 5) +   labs(y = \"Risk\")"},{"path":"/articles/vg01-stars-object.html","id":"simulated-data","dir":"Articles","previous_headings":"","what":"Simulated data","title":"Create a stars dataset","text":"begin, need data varies across regions time. example, simulate data illustrative purposes, practice, come study‚Äôs specific regions time periods. Next, simulate variables associated region time point. case, create values cases, temperature, precipitation. variable stored matrix rows correspond regions columns time points.","code":"set.seed(10) space <- st_make_grid(cellsize = c(1, 1), offset = c(0, 0), n = c(3, 2)) time <- seq(as.Date(\"2025-01-01\"), by = \"1 month\", length.out = 5) cases <- matrix(rpois(30, 100), nrow = 6, ncol = 5) temperature <- matrix(rnorm(30), nrow = 6, ncol = 5) precipitation <- matrix(rnorm(30), nrow = 6, ncol = 5)"},{"path":"/articles/vg01-stars-object.html","id":"creating-a-stars-object","dir":"Articles","previous_headings":"","what":"Creating a stars object","title":"Create a stars dataset","text":"now use simulated data construct stars object. object contain spatial, temporal, variable dimensions. several ways build objects, following method commonly used:","code":"stdata <- st_as_stars(   cases = cases, temperature = temperature, precipitation = precipitation,   dimensions = st_dimensions(geometry = space, time = time) ) stdata #> stars object with 2 dimensions and 3 attributes #> attribute(s): #>                     Min.    1st Qu.      Median        Mean     3rd Qu. #> cases          86.000000 93.0000000 99.00000000 98.90000000 102.7500000 #> temperature    -2.060541 -0.4165786  0.06808151  0.02795936   0.5496759 #> precipitation  -1.676105 -0.7343718 -0.17034766 -0.09712102   0.4299561 #>                      Max. #> cases          116.000000 #> temperature      1.766004 #> precipitation    2.106161 #> dimension(s): #>          from to refsys point #> geometry    1  6     NA FALSE #> time        1  5   Date FALSE #>                                                                 values #> geometry POLYGON ((0 0, 1 0, 1 1, ...,...,POLYGON ((2 1, 3 1, 3 2, ... #> time                                         2025-01-01,...,2025-05-01"},{"path":"/articles/vg01-stars-object.html","id":"manipulating-a-stars-object","dir":"Articles","previous_headings":"","what":"Manipulating a stars object","title":"Create a stars dataset","text":"stars object created, can use methods provided stars package. example, can visualize cases variable across time:  can also add additional variables stars object. instance, let‚Äôs add population variable:","code":"ggplot() +     geom_stars(aes(fill = cases), data = stdata) +     facet_wrap(~ time) +     scale_fill_distiller(palette = \"RdBu\") stdata[\"population\"] <- rep(rpois(6, 1000), each = 6) stdata #> stars object with 2 dimensions and 4 attributes #> attribute(s): #>                      Min.     1st Qu.        Median         Mean      3rd Qu. #> cases           86.000000  93.0000000   99.00000000  98.90000000  102.7500000 #> temperature     -2.060541  -0.4165786    0.06808151   0.02795936    0.5496759 #> precipitation   -1.676105  -0.7343718   -0.17034766  -0.09712102    0.4299561 #> population     953.000000 975.0000000 1004.00000000 999.60000000 1028.0000000 #>                       Max. #> cases           116.000000 #> temperature       1.766004 #> precipitation     2.106161 #> population     1038.000000 #> dimension(s): #>          from to refsys point #> geometry    1  6     NA FALSE #> time        1  5   Date FALSE #>                                                                 values #> geometry POLYGON ((0 0, 1 0, 1 1, ...,...,POLYGON ((2 1, 3 1, 3 2, ... #> time                                         2025-01-01,...,2025-05-01"},{"path":"/articles/vg02-advanced-features.html","id":"packages","dir":"Articles","previous_headings":"","what":"Packages","title":"Advanced features","text":"begin loading required packages.","code":"library(sfclust) library(stars) library(ggplot2) library(dplyr)"},{"path":"/articles/vg02-advanced-features.html","id":"data","dir":"Articles","previous_headings":"","what":"Data","title":"Advanced features","text":"simulated dataset used vignette, stgaus, included package. stars object one variable, y, two dimensions: geometry time. dataset represents number cases 100 regions, observed daily 91 days, starting January 2024. gain initial insights, can aggregate data weekly:  can also examine trends region:  regions exhibit similar trends time, overall patterns complex polinomial functions. goal cluster regions accounting spatial contiguity.","code":"data(\"stgaus\") stgaus #> stars object with 2 dimensions and 1 attribute #> attribute(s): #>         Min.    1st Qu.    Median          Mean   3rd Qu.     Max. #> y  -1.170275 -0.2390084 0.0302046 -0.0004274323 0.2095926 1.370593 #> dimension(s): #>          from  to     offset  delta refsys point #> geometry    1 100         NA     NA     NA FALSE #> time        1  91 2024-01-01 1 days   Date FALSE #>                                                                 values #> geometry POLYGON ((59.5033 683.285...,...,POLYGON ((942.7562 116.89... #> time                                                              NULL stweekly <- aggregate(stgaus, by = \"week\", FUN = mean) ggplot() +     geom_stars(aes(fill = y), stweekly) +     facet_wrap(~ time, ncol = 5) +     scale_fill_distiller(palette = \"RdBu\") +     theme_bw() stgaus |>     st_set_dimensions(\"geometry\", values = 1:nrow(stgaus)) |>     as_tibble() |>     ggplot() +     geom_line(aes(time, y, group = geometry, color = factor(geometry)), linewidth = 0.3) +     theme_bw() +     theme(legend.position = \"none\")"},{"path":[]},{"path":"/articles/vg02-advanced-features.html","id":"model","dir":"Articles","previous_headings":"Clustering","what":"Model","title":"Advanced features","text":"assume response variable YitY_{} region ii time tt follows normal distribution given partition MM: Yit‚à£Œºit,M‚àºindNormal(Œºit,œÉ2), Y_{} \\mid \\mu_{}, M \\stackrel{ind}{\\sim} \\text{Normal}(\\mu_{}, \\sigma^2),  mean Œºit\\mu_{} modeled based cluster assignment cic_i: Œºit=Œ±ci+fci,t, \\mu_{} = \\alpha_{c_i} + f_{c_i,t},  Œ±ci\\alpha_{c_i} intercept cluster cic_i, fci,tf_{c_i,t} latent random effect modeled random walk process. Specifically, impose condition: fci,t‚àífci,t‚àí1‚àºN(0,ŒΩ‚àí1),t=2,‚Ä¶,n. f_{c_i,t} - f_{c_i,t-1} \\sim N(0, \\nu^{-1}), \\quad \\text{} t = 2, \\dots, n. prior hyperparameter ŒΩc\\nu_c defined : log(ŒΩc)‚àºNormal(‚àí2,1). \\log(\\nu_c) \\sim \\text{Normal}(-2, 1).","code":""},{"path":"/articles/vg02-advanced-features.html","id":"initial-clustering","dir":"Articles","previous_headings":"Clustering","what":"Initial clustering","title":"Advanced features","text":"sfclust uses undirected graph represent connections regions proposes spatial clusters using graph minimum spanning trees (MST). default, sfclust accepts argument graphdata, include: undirected igraph object representing spatial connections, MST graph, membership vector indicating initial cluster assignments region. simplicity, can use genclust function generate initial random partitioning specified number clusters. example, create partition 20 clusters: Now, let‚Äôs visualize regions randomly clustered:","code":"set.seed(123) initial_cluster <- genclust(st_geometry(stgaus), nclust = 20) names(initial_cluster) #> [1] \"graph\"      \"mst\"        \"membership\" st_sf(st_geometry(stgaus), cluster = factor(initial_cluster$membership)) |>   ggplot() +     geom_sf(aes(fill = cluster)) +     theme_bw()"},{"path":"/articles/vg02-advanced-features.html","id":"sampling-with-sfclust","dir":"Articles","previous_headings":"Clustering","what":"Sampling with sfclust","title":"Advanced features","text":"initiate Bayesian clustering algorithm using generated partition (initial_cluster). Additionally, use capabilites INLA::inla define model includes random walk process linear predictor, custom priors scale hyperparameter. begin, run algorithm 50 iterations. output indicates starting 20 clusters, algorithm created 11 new clusters (births), removed 6 clusters (deaths), changed membership 3 clusters, modified minimum spanning tree (MST) 3 times. plot method allows us select graph produce. example, can visualize log marginal likelihood diagnose convergence. just 50 iterations, can see log marginal likelihood yet achieved convergence.","code":"result <- sfclust(stgaus, graphdata = initial_cluster, niter = 50,     formula = y ~ f(idt, model = \"rw1\", hyper = list(prec = list(prior = \"normal\", param = c(-2, 1))))) result #> Within-cluster formula: #> y ~ f(idt, model = \"rw1\", hyper = list(prec = list(prior = \"normal\",  #>     param = c(-2, 1)))) #>  #> Clustering hyperparameters: #>   log(1-q)      birth      death     change      hyper  #> -0.6931472  0.4250000  0.4250000  0.1000000  0.0500000  #>  #> Clustering movement counts: #>  births  deaths changes  hypers  #>      11       6       3       3  #>  #> Log marginal likelihood (sample 50 out of 50): 2268.291 plot(result, which = 3)"},{"path":"/articles/vg02-advanced-features.html","id":"continue-sampling","dir":"Articles","previous_headings":"Clustering","what":"Continue sampling","title":"Advanced features","text":"achieve convergence, can continue sampling using update function specify number new iterations niter argument: 2000 additional iterations, many clustering movements. Furthermore, visualizing results, can observe log marginal likelihood achieved convergence.","code":"result2 <- update(result, niter = 2000) result2 #> Within-cluster formula: #> y ~ f(idt, model = \"rw1\", hyper = list(prec = list(prior = \"normal\",  #>     param = c(-2, 1)))) #>  #> Clustering hyperparameters: #>   log(1-q)      birth      death     change      hyper  #> -0.6931472  0.4250000  0.4250000  0.1000000  0.0500000  #>  #> Clustering movement counts: #>  births  deaths changes  hypers  #>      34      49      17      94  #>  #> Log marginal likelihood (sample 2000 out of 2000): 12708.35 plot(result2, which = 3)"},{"path":"/articles/vg02-advanced-features.html","id":"results","dir":"Articles","previous_headings":"","what":"Results","title":"Advanced features","text":"final iteration indicates algorithm identified 10 clusters, log marginal likelihood 12,708.35. largest cluster consists 27 regions, smallest contains one region. Let‚Äôs visualize regions grouped cluster.  Let‚Äôs visualize original data grouped cluster.","code":"summary(result2, sort = TRUE) #> Summary for clustering sample 2000 out of 2000  #>  #> Within-cluster formula: #> y ~ f(idt, model = \"rw1\", hyper = list(prec = list(prior = \"normal\",  #>     param = c(-2, 1)))) #>  #> Counts per cluster: #>  1  2  3  4  5  6  7  8  9 10  #> 27 20 12 11  9  9  6  3  2  1  #>  #> Log marginal likelihood:  12708.35 plot(result2, which = 1:2, sort = TRUE, legend = TRUE) plot_clusters_series(result2, y, sort = TRUE) +   facet_wrap(~ cluster, ncol = 5) +   labs(title = \"Risk per cluster\", y = \"Response\")"},{"path":"/articles/vg11-covid-usa.html","id":"load-packages-and-data","dir":"Articles","previous_headings":"","what":"Load packages and data","title":"Weekly relative risk of COVID-19 in US states","text":"data application available GitHub repository: https://github.com/ErickChacon/sfclust/blob/main/tools/data/usacovid.rds. contains weekly data 49 states, including number cases, population, number expected cases. Note dimension names space time. Since sfclust expects c(\"geometry\", \"time\"), must specify stnames argument using function sfclust() package.","code":"library(sfclust) library(stars) library(ggplot2) library(dplyr) usacovid <- readRDS(here::here(file.path(\"tools\", \"data\", \"usacovid.rds\"))) usacovid #> stars object with 2 dimensions and 3 attributes #> attribute(s): #>                     Min.      1st Qu.       Median         Mean     3rd Qu. #> cases             0.0000      387.000     2921.000     8862.738     8653.00 #> population  4072852.0000 13333320.000 32645312.000 45820355.000 51060352.00 #> expected        175.6667     2934.647     6013.216     8862.738    11052.02 #>                     Max. #> cases          316910.00 #> population  274041320.00 #> expected        55213.08 #> dimension(s): #>       from to     offset  delta refsys point #> time     1 51 2020-01-20 7 days   Date FALSE #> space    1 49         NA     NA WGS 84 FALSE #>                                                              values #> time                                                           NULL #> space MULTIPOLYGON (((-88.05338...,...,MULTIPOLYGON (((-111.0467..."},{"path":"/articles/vg11-covid-usa.html","id":"exploratory-analysis","dir":"Articles","previous_headings":"","what":"Exploratory analysis","title":"Weekly relative risk of COVID-19 in US states","text":"begin visualizing weekly relative risk Covid-19 across 49 states. Higher risk levels observed toward end year.  can also examine time series relative risk state. Peaks evident around April, July, especially December.","code":"ggplot() +     geom_stars(aes(fill = cases/expected), data = usacovid) +     facet_wrap(~ time) +     scale_fill_distiller(palette = \"RdBu\") +     labs(fill = \"Relative risk\") +     theme_bw() +     theme(legend.position = \"bottom\") usacovid |>     st_set_dimensions(\"space\", values = 1:ncol(usacovid)) |>     as_tibble() |>     ggplot() +     geom_line(aes(time, cases/expected, group = space, color = factor(space)), linewidth = 0.3) +     geom_point(aes(time, cases/expected, group = space, color = factor(space))) +     labs(y = \"Relative risk\", x = NULL) +     theme_bw() +     theme(legend.position = \"none\")"},{"path":[]},{"path":"/articles/vg11-covid-usa.html","id":"model-fitting","dir":"Articles","previous_headings":"Spatial clustering","what":"Model fitting","title":"Weekly relative risk of COVID-19 in US states","text":"assume logarithm relative risk can explained : polynomial trend time autoregressive effect idt unstructured random effect across states times (id) begin one cluster per state (49 clusters total). sure set dimension names: stnames = c(\"space\", \"time\"). Summary clustering steps: 36 cluster splits 74 cluster merges 12 cluster composition changes 187 updates minimum spanning tree 400 samples retained (thinning) 4000 iterations. final marginal likelihood -19196.77.","code":"formula <- cases ~ 1 + poly(time, 3) + f(idt, model = \"ar1\") + f(id) geodata <- genclust(st_geometry(usacovid), nclust = 49)  set.seed(123) result <- sfclust(usacovid, graphdata = geodata, stnames = c(\"space\", \"time\"),     formula = formula, family = \"poisson\", E = expected,     niter = 4000, burnin = 0, thin = 10, nmessage = 10, nsave = 100,     path_save = \"usacovid-mcmc.rds\") result #> Within-cluster formula: #> cases ~ 1 + poly(time, 3) + f(idt, model = \"ar1\") + f(id) #>  #> Clustering hyperparameters: #>   log(1-q)      birth      death     change      hyper  #> -0.6931472  0.4250000  0.4250000  0.1000000  0.0500000  #>  #> Clustering movement counts: #>  births  deaths changes  hypers  #>      36      74      12     187  #>  #> Log marginal likelihood (sample 400 out of 400): -19196.71"},{"path":"/articles/vg11-covid-usa.html","id":"results","dir":"Articles","previous_headings":"Spatial clustering","what":"Results","title":"Weekly relative risk of COVID-19 in US states","text":"summary() output shows 7 11 clusters contain one state. largest cluster includes 10 states, second includes 9, . order verify adequacy clustering, check convergence using plot() function option = 3.  figure indicates marginal likelihood improves significantly within first 100 iterations (thinning) stabilizes afterward sample 200. Now, can visualize spatial cluster assignment predicted mean cluster:  plot() output indicates : largest cluster southwestern US, followed clusters central northwestern regions. Mean relative risk increases gradually across year, different peaks per cluster. fitted function return stars object prediction summaries fitting, cluster assignment, mean_cluster linear predictor, inverse linear predictor (mean_cluster_inv).","code":"summary(result, sort = TRUE) #> Summary for clustering sample 400 out of 400  #>  #> Within-cluster formula: #> cases ~ 1 + poly(time, 3) + f(idt, model = \"ar1\") + f(id) #>  #> Counts per cluster: #>  1  2  3  4  5  6  7  8  9 10 11  #> 10  9  8  6  5  4  3  1  1  1  1  #>  #> Log marginal likelihood:  -19196.71 plot(result, which = 3) plot(result, which = 1:2, legend = TRUE, sort = TRUE) us_fit <- fitted(result, sort = TRUE) us_fit #> stars object with 2 dimensions and 10 attributes #> attribute(s): #>                            Min.     1st Qu.     Median       Mean    3rd Qu. #> mean              -1.875691e+01 -1.84907558 -0.6834142 -2.1247489 0.24891764 #> sd                 1.776338e-03  0.01074621  0.0184909  0.1442848 0.05030386 #> 0.025quant        -2.177483e+01 -1.94097604 -0.7270388 -2.4117157 0.22542558 #> 0.5quant          -1.874348e+01 -1.84907552 -0.6834142 -2.1234705 0.24891764 #> 0.975quant        -1.581470e+01 -1.74954612 -0.6387514 -1.8450015 0.27627810 #> mode              -1.874333e+01 -1.84907552 -0.6834142 -2.1231750 0.24891764 #> mean_inv           7.144593e-09  0.15738259  0.5048903  1.0000604 1.28263941 #> cluster            1.000000e+00  2.00000000  3.0000000  3.7551020 5.00000000 #> mean_cluster      -1.875688e+01 -1.76075551 -0.6846120 -2.1258073 0.15042338 #> mean_cluster_inv   7.144842e-09  0.17191493  0.5042859  0.9636620 1.16233361 #>                        Max. #> mean               1.898851 #> sd                 1.847165 #> 0.025quant         1.841667 #> 0.5quant           1.898851 #> 0.975quant         1.956034 #> mode               1.898851 #> mean_inv           6.678214 #> cluster           11.000000 #> mean_cluster       1.634518 #> mean_cluster_inv   5.126985 #> dimension(s): #>       from to     offset  delta refsys point #> time     1 51 2020-01-20 7 days   Date FALSE #> space    1 49         NA     NA WGS 84 FALSE #>                                                              values #> time                                                           NULL #> space MULTIPOLYGON (((-88.05338...,...,MULTIPOLYGON (((-111.0467..."},{"path":"/articles/vg11-covid-usa.html","id":"empirical-risk-per-cluster","dir":"Articles","previous_headings":"Spatial clustering","what":"Empirical risk per cluster","title":"Weekly relative risk of COVID-19 in US states","text":"use cluster assignments analyze visualize empirical relative risk per cluster. can easily done plot_cluster_series() function:  figure shows distinct epidemic dynamics cluster: Cluster 1 shows increasing risk peak July‚ÄìAugust. Cluster 2 peaks around November‚ÄìDecember, decline year-end. Cluster 3 shows early activity around March high risk near January. Clusters 4‚Äì7 follow various intermediate trends. Clusters 8‚Äì11 exhibit less typical behavior.","code":"plot_clusters_series(result, cases/expected, sort = TRUE, clusters = 1:10) +   facet_wrap(~ cluster, ncol = 5) +   scale_x_date(date_breaks = \"2 months\", date_labels =  \"%b\") +   labs(y = \"Relative risk\")"},{"path":"/articles/vg12-temp-canada.html","id":"load-packages-and-data","dir":"Articles","previous_headings":"","what":"Load packages and data","title":"Standardized daily temperature at Canadian stations","text":"use polygonal shapes Canadian provinces rnaturalearth package CanadianWeather dataset fda package, commonly used functional data analysis. dataset list containing daily temperature data per station, along metadata station coordinates.","code":"library(sfclust) library(stars) library(ggplot2) library(dplyr) library(rnaturalearth) canada <- ne_states(\"Canada\") data(CanadianWeather, package = \"fda\") names(CanadianWeather) #> [1] \"dailyAv\"       \"place\"         \"province\"      \"coordinates\"   #> [5] \"region\"        \"monthlyTemp\"   \"monthlyPrecip\" \"geogindex\""},{"path":[]},{"path":"/articles/vg12-temp-canada.html","id":"create-stars-data","dir":"Articles","previous_headings":"Prepare data","what":"Create stars data","title":"Standardized daily temperature at Canadian stations","text":"First, convert station coordinates sf object visualize locations.  standardize temperature per station focus clustering functional shape time series rather absolute values. convert data stars object geometry time dimensions, required function sfclust().","code":"stations <- as.data.frame(CanadianWeather$coordinates) |>   mutate(longitud = - `W.longitude`) |>   rename(latitud = \"N.latitude\") |>   select(longitud, latitud) |>   st_as_sf(coords = c(\"longitud\", \"latitud\"), crs = st_crs(4326))  ggplot() +   geom_sf(data = canada) +   geom_sf(data = stations, size = 2) +   theme_bw() time <- seq(as.Date(\"1977-01-01\"), as.Date(\"1977-12-31\"), by = \"1 day\") canweather <- st_as_stars(     temp = t(CanadianWeather$dailyAv[, , 1]),     ztemp = t(scale(CanadianWeather$dailyAv[, , 1])),     dimensions = st_dimensions(geometry = st_geometry(stations), time = time, point = TRUE) ) canweather #> stars object with 2 dimensions and 2 attributes #> attribute(s): #>              Min.    1st Qu.     Median          Mean   3rd Qu.      Max. #> temp   -34.800000 -6.7000000 4.10000000  1.877659e+00 12.600000 22.800000 #> ztemp   -1.967879 -0.9821809 0.09676872 -2.067071e-19  0.960108  1.711485 #> dimension(s): #>          from  to     offset  delta refsys point #> geometry    1  35         NA     NA WGS 84  TRUE #> time        1 365 1977-01-01 1 days   Date  TRUE #>                                                 values #> geometry POINT (-52.43 47.34),...,POINT (-94.54 74.41) #> time                                              NULL"},{"path":"/articles/vg12-temp-canada.html","id":"exploratory-analysis","dir":"Articles","previous_headings":"Prepare data","what":"Exploratory analysis","title":"Standardized daily temperature at Canadian stations","text":"Let‚Äôs explore monthly averages standardized temperatures. Higher standardized temperatures appear northern stations July, lower values observed southern stations January.  can also visualize temperature trends time station. Although overall shape similar, noticeable differences timing rise fall temperatures across stations.","code":"monthdata <- aggregate(canweather, by = \"month\", FUN = mean) ggplot() +   geom_sf(data = canada) +   geom_stars(aes(fill = ztemp), monthdata, shape = 21, size = 1.3) +   facet_wrap(~ time) +   scale_fill_distiller(palette = \"RdBu\") +   theme_bw() +   theme(legend.position = \"bottom\") canweather |>   st_set_dimensions(\"geometry\", values = 1:nrow(canweather)) |>   as_tibble() |>     ggplot() +     geom_line(aes(time, ztemp, group = geometry, color = factor(geometry)), linewidth = 0.3) +     theme_bw() +     theme(legend.position = \"none\")"},{"path":[]},{"path":"/articles/vg12-temp-canada.html","id":"create-graph","dir":"Articles","previous_headings":"Spatial clustering","what":"Create graph","title":"Standardized daily temperature at Canadian stations","text":"sfclust() function assumes POLYGON geometry stars object build spatial adjacency graph. However, data uses POINT geometries representing station locations. create spatial graph, construct Voronoi tessellation generates polygon station.","code":"stations2 <- st_transform(stations, st_crs(3857))  # create boundary boundary <- st_convex_hull(st_union(stations2)) |>   st_buffer(units::set_units(1000, \"km\"))  # create polygons with voronoi domain <- st_cast(st_voronoi(st_union(stations2), boundary)) |>   st_intersection(boundary)  # reorganize the polygons to match stations domain <- domain[as.numeric(st_within(stations2, domain))] |>   st_transform(st_crs(stations))  ggplot() +   geom_sf(data = domain, color = 2, fill = NA) +   geom_sf(data = stations)"},{"path":"/articles/vg12-temp-canada.html","id":"model-fitting","dir":"Articles","previous_headings":"Spatial clustering","what":"Model fitting","title":"Standardized daily temperature at Canadian stations","text":"Based previously observed trends, model standardized temperature function : polynomial trend time. random walk capture autocorrelated temporal variation idt. initialize 35 clusters‚Äîone per polygon‚Äîset strong penalty (logpen = -300) discourage overfitting large number clusters unless log marginal likelihood improves least 300. course sampling, 8 cluster additions, 29 merges, 19 reassignments occurred. marginal likelihood reached value 17,541.96. thinning, 400 samples retained.","code":"formula <- ztemp ~ poly(time, 2) + f(idt, model = \"rw1\") geodata <- genclust(domain, nclust = 35)  set.seed(123) result <- sfclust(canweather, graphdata = geodata, formula = formula,     logpen = -300, niter = 4000, burnin = 0, thin = 10, nmessage = 10, nsave = 100,     control.inla = list(control.vb = list(enable = FALSE)),     path_save = file.path(\"canweather-mcmc.rds\")) result #> Within-cluster formula: #> ztemp ~ poly(time, 2) + f(idt, model = \"rw1\") #>  #> Clustering hyperparameters: #> log(1-q)    birth    death   change    hyper  #> -300.000    0.425    0.425    0.100    0.050  #>  #> Clustering movement counts: #>  births  deaths changes  hypers  #>       8      29      19     171  #>  #> Log marginal likelihood (sample 400 out of 400): 17541.96"},{"path":"/articles/vg12-temp-canada.html","id":"results","dir":"Articles","previous_headings":"Spatial clustering","what":"Results","title":"Standardized daily temperature at Canadian stations","text":"According summary() output, 8 14 clusters one member. largest clusters contain 7, 7, 4 stations, respectively. assess convergence, plot marginal likelihood trace:  plot shows marginal likelihood stabilizes first 100 (thinned) iterations. , visualize cluster assignments averaged fitted means:  largest cluster southeastern Canada includes 7 closely located stations. second-largest dispersed, third southwest 4 stations.","code":"summary(result, sort = TRUE) #> Summary for clustering sample 400 out of 400  #>  #> Within-cluster formula: #> ztemp ~ poly(time, 2) + f(idt, model = \"rw1\") #>  #> Counts per cluster: #>  1  2  3  4  5  6  7  8  9 10 11 12 13 14  #>  7  7  4  3  2  2  2  2  1  1  1  1  1  1  #>  #> Log marginal likelihood:  17541.96 plot(result, which = 3) gg1 <- plot_clusters_map(result, sort = TRUE, legend = TRUE, clusters = 1:8,     geom_before = geom_sf(data = canada), size = 3, alpha = 0.8) gg2 <- plot_clusters_fitted(result, sort = TRUE, clusters = 1:8, linewidth = 0.4) gg1 + gg2"},{"path":"/articles/vg12-temp-canada.html","id":"empirical-standardised-temperature-per-cluster","dir":"Articles","previous_headings":"Spatial clustering","what":"Empirical standardised temperature per cluster","title":"Standardized daily temperature at Canadian stations","text":"use plot_clusters_series() visualize raw standardized temperature per cluster. output can customized using ggplot2 elements.  Panels 1‚Äì8 show empirical risk per cluster clusters contain one station. main differences among clusters lie initial shape curve, speed increase, shape timing peak, behavior decay phase. example, clusters 1 2 exhibit bell-shaped pattern, others, clusters 3 6, display nearly linear increase reaching maximum level. Panels 9‚Äì14 present empirical risk per cluster contain one station. single-station clusters tend exhibit unique shapes, distinguish previous multi-station clusters also .","code":"plot_clusters_series(result, ztemp) +   geom_hline(yintercept = 0, linetype = 2) +   facet_wrap(~ cluster, ncol = 5) +   scale_x_date(date_breaks = \"2 months\", date_labels =  \"%b\") +   labs(y = \"Standardized temperature\")"},{"path":"/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Erick . Chac√≥n-Montalv√°n. Author, maintainer. Ruiman Zhong. Author. Paula Moraga. Author.","code":""},{"path":"/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Chac√≥n-Montalv√°n EA, Zhong R, Moraga P (2025). sfclust: Bayesian Spatial Functional Clustering. R package version 1.0.1, https://erickchacon.github.io/sfclust.","code":"@Manual{,   title = {sfclust: Bayesian Spatial Functional Clustering},   author = {Erick A. Chac√≥n-Montalv√°n and Ruiman Zhong and Paula Moraga},   year = {2025},   note = {R package version 1.0.1},   url = {https://erickchacon.github.io/sfclust}, }"},{"path":[]},{"path":"/index.html","id":"introduction","dir":"","previous_headings":"","what":"Introduction","title":"Bayesian Spatial Functional Clustering","text":"sfclust provides Bayesian framework clustering spatio-temporal data, supporting Gaussian non-Gaussian responses. approach enforces spatial adjacency constraints, ensuring clusters consist neighboring regions similar temporal dynamics. package implements methodology described ‚ÄúBayesian Spatial Functional Data Clustering: Applications Disease Surveillance‚Äù, available arXiv:2407.12633. addition core clustering algorithm, sfclust offers tools model diagnostics, visualization, result summarization.","code":""},{"path":"/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Bayesian Spatial Functional Clustering","text":"sfclust relies INLA package efficient Bayesian inference. Install : INLA installed, can install sfclust CRAN : can install development version GitHub:","code":"install.packages(\"INLA\", dependencies = TRUE,   repos = c(getOption(\"repos\"), INLA = \"https://inla.r-inla-download.org/R/stable\") ) install.packages(\"sfclust\") devtools::install_github(\"ErickChacon/sfclust\")"},{"path":"/index.html","id":"basic-usage","dir":"","previous_headings":"","what":"Basic Usage","title":"Bayesian Spatial Functional Clustering","text":"Suppose spatio-temporal stars object named stars_object contains variables cases expected (expected number cases). following code fits spatial functional clustering model, cluster‚Äôs mean trend modeled temporal random walk unstructured random effect:","code":"form <- cases ~ f(idt, model = \"rw1\") + f(id, model = \"iid\") result <- sfclust(stars_object, formula = form, family = \"poisson\", E = expected, niter = 1000) result"},{"path":"/index.html","id":"acknowledgments","dir":"","previous_headings":"","what":"Acknowledgments","title":"Bayesian Spatial Functional Clustering","text":"thank authors ‚ÄúBayesian Clustering Spatial Functional Data Application Human Mobility Study COVID-19‚Äù, Bohai Zhang, Huiyan Sang, Zhao Tang Luo, Hui Huang (DOI:10.1214/22-AOAS1643, Annals Applied Statistics, 2023), making supplementary code publicly available (DOI:10.1214/22-AOAS1643SUPPB). implementation builds upon clustering algorithm uses code generating spanning trees. grateful contributions inspiration.","code":""},{"path":"/reference/data_all.html","id":null,"dir":"Reference","previous_headings":"","what":"Prepare data in long format ‚Äî data_all","title":"Prepare data in long format ‚Äî data_all","text":"Convert spatio-temporal data long format indices time spatial location.","code":""},{"path":"/reference/data_all.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Prepare data in long format ‚Äî data_all","text":"","code":"data_all(stdata, stnames = c(\"geometry\", \"time\"))"},{"path":"/reference/data_all.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Prepare data in long format ‚Äî data_all","text":"stdata stars object containing spatial-temporal dimensions defined stnames. stnames names spatial temporal dimensions.","code":""},{"path":"/reference/data_all.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Prepare data in long format ‚Äî data_all","text":"long-format data frame ids observation  spatial time indexing.","code":""},{"path":"/reference/data_all.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Prepare data in long format ‚Äî data_all","text":"","code":"library(sfclust) library(stars) #> Loading required package: abind #> Loading required package: sf #> Linking to GEOS 3.12.1, GDAL 3.8.4, PROJ 9.4.0; sf_use_s2() is TRUE  dims <- st_dimensions(   geometry = st_sfc(lapply(1:5, function(i) st_point(c(i, i)))),   time = seq(as.Date(\"2024-01-01\"), by = \"1 day\", length.out = 3) ) stdata <- st_as_stars(cases = array(1:15, dim = c(5, 3)), dimensions = dims)  data_all(stdata) #>    id ids idt       time cases #> 1   1   1   1 2024-01-01     1 #> 2   2   2   1 2024-01-01     2 #> 3   3   3   1 2024-01-01     3 #> 4   4   4   1 2024-01-01     4 #> 5   5   5   1 2024-01-01     5 #> 6   6   1   2 2024-01-02     6 #> 7   7   2   2 2024-01-02     7 #> 8   8   3   2 2024-01-02     8 #> 9   9   4   2 2024-01-02     9 #> 10 10   5   2 2024-01-02    10 #> 11 11   1   3 2024-01-03    11 #> 12 12   2   3 2024-01-03    12 #> 13 13   3   3 2024-01-03    13 #> 14 14   4   3 2024-01-03    14 #> 15 15   5   3 2024-01-03    15"},{"path":"/reference/data_each.html","id":null,"dir":"Reference","previous_headings":"","what":"Prepare data for a cluster ‚Äî data_each","title":"Prepare data for a cluster ‚Äî data_each","text":"Subset spatio-temporal dataset cluster convert long format indices time spatial location.","code":""},{"path":"/reference/data_each.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Prepare data for a cluster ‚Äî data_each","text":"","code":"data_each(k, membership, stdata, stnames = c(\"geometry\", \"time\"))"},{"path":"/reference/data_each.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Prepare data for a cluster ‚Äî data_each","text":"k cluster number subset. membership vector defining cluster membership region. stdata stars object containing spatial-temporal dimensions defined stnames. stnames names spatial temporal dimensions.","code":""},{"path":"/reference/data_each.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Prepare data for a cluster ‚Äî data_each","text":"long-format data frame ids observation  spatial time indexing.","code":""},{"path":"/reference/data_each.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Prepare data for a cluster ‚Äî data_each","text":"","code":"library(sfclust) library(stars)  dims <- st_dimensions(   geometry = st_sfc(lapply(1:5, function(i) st_point(c(i, i)))),   time = seq(as.Date(\"2024-01-01\"), by = \"1 day\", length.out = 3) ) stdata <- st_as_stars(cases = array(1:15, dim = c(5, 3)), dimensions = dims)  data_each(k = 2, membership = c(1, 1, 1, 2, 2), stdata) #>   id ids idt       time cases #> 1  4   4   1 2024-01-01     4 #> 2  5   5   1 2024-01-01     5 #> 3  9   4   2 2024-01-02     9 #> 4 10   5   2 2024-01-02    10 #> 5 14   4   3 2024-01-03    14 #> 6 15   5   3 2024-01-03    15"},{"path":"/reference/fitted.sfclust.html","id":null,"dir":"Reference","previous_headings":"","what":"Fitted Values for sfclust Objects ‚Äî fitted.sfclust","title":"Fitted Values for sfclust Objects ‚Äî fitted.sfclust","text":"function calculates fitted values specific clustering sample sfclust object, based estimated models cluster. fitted values computed using membership assignments model parameters associated selected clustering sample.","code":""},{"path":"/reference/fitted.sfclust.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Fitted Values for sfclust Objects ‚Äî fitted.sfclust","text":"","code":"# S3 method for class 'sfclust' fitted(object, sample = object$clust$id, sort = FALSE, aggregate = FALSE, ...)"},{"path":"/reference/fitted.sfclust.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Fitted Values for sfclust Objects ‚Äî fitted.sfclust","text":"object object class 'sfclust', containing clustering results models. sample integer specifying clustering sample number fitted values computed. default id current clustering. value must 1 total number clustering (membership) samples. sort Logical value indicating clusters relabel based number elements. aggregate Logical value indicating fitted values desired cluster level. ... Additional arguments, currently used.","code":""},{"path":"/reference/fitted.sfclust.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Fitted Values for sfclust Objects ‚Äî fitted.sfclust","text":"stars object linear predictor fitted values regions levels. case aggregate = TRUE, output produces stars objecto cluster levels.","code":""},{"path":"/reference/fitted.sfclust.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Fitted Values for sfclust Objects ‚Äî fitted.sfclust","text":"function first checks provided sample value valid (.e., within range available clustering samples). specified sample match current clustering id, sfclust object updated accordingly. retrieves membership assignments cluster models selected sample, calculates linear predictions cluster, combines matrix fitted values.","code":""},{"path":"/reference/fitted.sfclust.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Fitted Values for sfclust Objects ‚Äî fitted.sfclust","text":"","code":"# \\donttest{ library(sfclust)  data(stgaus) result <- sfclust(stgaus, formula = y ~ f(idt, model = \"rw1\"), niter = 10,   nmessage = 1) #> Iteration 1: clusters = 11, births = 1, deaths = 0, changes = 0, hypers = 0, log_mlike = -1553.38566526668 #> Iteration 2: clusters = 11, births = 1, deaths = 0, changes = 1, hypers = 0, log_mlike = -1463.30976490188 #> Iteration 3: clusters = 11, births = 1, deaths = 0, changes = 1, hypers = 0, log_mlike = -1463.30976490188 #> Iteration 4: clusters = 11, births = 1, deaths = 0, changes = 1, hypers = 0, log_mlike = -1463.30976490188 #> Iteration 5: clusters = 12, births = 2, deaths = 0, changes = 1, hypers = 0, log_mlike = -722.867221452376 #> Iteration 6: clusters = 12, births = 2, deaths = 0, changes = 1, hypers = 0, log_mlike = -722.867221452376 #> Iteration 7: clusters = 12, births = 2, deaths = 0, changes = 1, hypers = 0, log_mlike = -722.867221452376 #> Iteration 8: clusters = 13, births = 3, deaths = 0, changes = 1, hypers = 0, log_mlike = -635.210851435991 #> Iteration 9: clusters = 13, births = 3, deaths = 0, changes = 1, hypers = 0, log_mlike = -635.210851435991 #> Iteration 10: clusters = 14, births = 4, deaths = 0, changes = 1, hypers = 0, log_mlike = -449.744409163735  # Estimated values ordering clusters by size df_est <- fitted(result, sort = TRUE)  # Estimated values aggregated by cluster df_est <- fitted(result, aggregate = TRUE)  # Estimated values using a particular clustering sample df_est <- fitted(result, sample = 3) # }"},{"path":"/reference/genclust.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate clusters for spatial clustering ‚Äî genclust","title":"Generate clusters for spatial clustering ‚Äî genclust","text":"Creates undirected graph spatial polygonal data, computes minimum spanning tree (MST), generates nclust clusters. function used initialize cluster membership clustering algorithm, sfclust.","code":""},{"path":"/reference/genclust.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate clusters for spatial clustering ‚Äî genclust","text":"","code":"genclust(x, nclust = 10, weights = NULL)"},{"path":"/reference/genclust.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate clusters for spatial clustering ‚Äî genclust","text":"x sf sfc object representing spatial polygonal data. can also matrix Matrix object non-zero values representing weighted connectivity units. nclust Integer, specifying initial number clusters. weights Optional numeric vector matrix weights units x. dimensions n^2, n number units x. NULL, random weights assigned.","code":""},{"path":"/reference/genclust.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate clusters for spatial clustering ‚Äî genclust","text":"list three elements: graph: undirected graph object representing spatial contiguity. mst: minimum spanning tree. membership: cluster membership elements x.","code":""},{"path":"/reference/genclust.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate clusters for spatial clustering ‚Äî genclust","text":"","code":"library(sfclust) library(sf)  x <- st_make_grid(cellsize = c(1, 1), offset = c(0, 0), n = c(3, 2))  # using distance between geometries clust <- genclust(x, nclust = 3, weights = st_distance(st_centroid(x))) print(clust) #> $graph #> IGRAPH abe0acc UNW- 6 11 --  #> + attr: name (v/c), weight (e/n) #> + edges from abe0acc (vertex names): #>  [1] 1--2 1--4 1--5 2--3 2--4 2--5 2--6 3--5 3--6 4--5 5--6 #>  #> $mst #> IGRAPH 0da39c5 UNW- 6 5 --  #> + attr: name (v/c), vid (v/n), weight (e/n) #> + edges from 0da39c5 (vertex names): #> [1] 1--4 2--3 3--6 4--5 5--6 #>  #> $membership #> 1 2 3 4 5 6  #> 1 2 3 3 3 3  #>  plot(st_sf(x, cluster = factor(clust$membership)))   # using increasing weights cluster_ini <- genclust(x, nclust = 3, weights = 1:36) print(cluster_ini) #> $graph #> IGRAPH 06618d6 U-W- 6 11 --  #> + attr: weight (e/n) #> + edges from 06618d6: #>  [1] 1--2 1--4 1--5 2--3 2--4 2--5 2--6 3--5 3--6 4--5 5--6 #>  #> $mst #> IGRAPH cf527dd U-W- 6 5 --  #> + attr: vid (v/n), weight (e/n) #> + edges from cf527dd: #> [1] 1--2 1--4 1--5 2--3 2--6 #>  #> $membership #> [1] 1 1 1 1 2 3 #>  plot(st_sf(x, cluster = factor(cluster_ini$membership)))   # using on random weights cluster_ini <- genclust(x, nclust = 3, weights = runif(36)) print(cluster_ini) #> $graph #> IGRAPH 6a96933 U-W- 6 11 --  #> + attr: weight (e/n) #> + edges from 6a96933: #>  [1] 1--2 1--4 1--5 2--3 2--4 2--5 2--6 3--5 3--6 4--5 5--6 #>  #> $mst #> IGRAPH 4d0cbea U-W- 6 5 --  #> + attr: vid (v/n), weight (e/n) #> + edges from 4d0cbea: #> [1] 1--2 1--5 2--3 2--4 3--6 #>  #> $membership #> [1] 1 1 2 1 1 3 #>  plot(st_sf(x, cluster = factor(cluster_ini$membership)))"},{"path":"/reference/log_mlik_all.html","id":null,"dir":"Reference","previous_headings":"","what":"Fit models and compute the log marginal likelihood for all clusters ‚Äî log_mlik_all","title":"Fit models and compute the log marginal likelihood for all clusters ‚Äî log_mlik_all","text":"Fit specified INLA model cluster compute log marginal likelihood cluster specified membership vector.","code":""},{"path":"/reference/log_mlik_all.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Fit models and compute the log marginal likelihood for all clusters ‚Äî log_mlik_all","text":"","code":"log_mlik_all(   membership,   stdata,   stnames = c(\"geometry\", \"time\"),   correction = TRUE,   detailed = FALSE,   ... )"},{"path":"/reference/log_mlik_all.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Fit models and compute the log marginal likelihood for all clusters ‚Äî log_mlik_all","text":"membership Integer, character factor vector indicating cluster membership spatial unit. stdata stars object spatial-temporal dimensions defined stnames, including predictors response variables. stnames names spatial temporal dimensions stdata object. correction Logical value indicating whether correction dispersion. detailed Logical value indicating whether return INLA model instead log marginal likelihood. argument correction applied case. ... Arguments passed inla function (eg. family, formula E).","code":""},{"path":"/reference/log_mlik_all.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Fit models and compute the log marginal likelihood for all clusters ‚Äî log_mlik_all","text":"numeric vector containing log marginal likelihood cluster fitted INLA model cluster detailed = TRUE.","code":""},{"path":"/reference/log_mlik_all.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Fit models and compute the log marginal likelihood for all clusters ‚Äî log_mlik_all","text":"","code":"# \\donttest{ library(sfclust) library(stars)  dims <- st_dimensions(   geometry = st_sfc(lapply(1:5, function(i) st_point(c(i, i)))),   time = seq(as.Date(\"2024-01-01\"), by = \"1 day\", length.out = 3) ) stdata <- st_as_stars(   cases = array(rpois(15, 100 * exp(1)), dim = c(5, 3)),   temperature = array(runif(15, 15, 20), dim = c(5, 3)),   expected = array(100, dim = c(5, 3)),   dimensions = dims )  log_mlik_all(c(1, 1, 1, 2, 2), stdata,   formula = cases ~ temperature, family = \"poisson\", E = expected) #> [1] -48.30537 -37.56921  models = log_mlik_all(c(1, 1, 1, 2, 2), stdata, detailed = TRUE,   formula = cases ~ temperature, family = \"poisson\", E = expected) lapply(models, summary) #> [[1]] #> Time used: #>     Pre = 0.2, Running = 0.158, Post = 0.00989, Total = 0.367  #> Fixed effects: #>              mean    sd 0.025quant 0.5quant 0.975quant  mode kld #> (Intercept) 0.728 0.229      0.279    0.728      1.177 0.728   0 #> temperature 0.015 0.013     -0.011    0.015      0.041 0.015   0 #>  #> Marginal log-Likelihood:  -48.30  #>  is computed  #> Posterior summaries for the linear predictor and the fitted values are computed #> (Posterior marginals needs also 'control.compute=list(return.marginals.predictor=TRUE)') #>  #>  #> [[2]] #> Time used: #>     Pre = 0.184, Running = 0.157, Post = 0.00985, Total = 0.351  #> Fixed effects: #>               mean    sd 0.025quant 0.5quant 0.975quant   mode kld #> (Intercept)  1.643 0.383      0.893    1.643      2.394  1.643   0 #> temperature -0.038 0.023     -0.082   -0.038      0.007 -0.038   0 #>  #> Marginal log-Likelihood:  -37.57  #>  is computed  #> Posterior summaries for the linear predictor and the fitted values are computed #> (Posterior marginals needs also 'control.compute=list(return.marginals.predictor=TRUE)') #>  #>  # }"},{"path":"/reference/plot.sfclust.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot function for sfclust objects ‚Äî plot.sfclust","title":"Plot function for sfclust objects ‚Äî plot.sfclust","text":"function visualizes estimated clusters sfclust object. can display: (1) map regions colored assigned cluster, (2) functional shapes linear predictors cluster, (3) traceplot log marginal likelihood. conditional legend added number clusters less 10.","code":""},{"path":"/reference/plot.sfclust.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot function for sfclust objects ‚Äî plot.sfclust","text":"","code":"# S3 method for class 'sfclust' plot(   x,   sample = x$clust$id,   which = 1:3,   clusters = NULL,   sort = FALSE,   legend = FALSE,   geom_before = NULL,   ... )"},{"path":"/reference/plot.sfclust.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot function for sfclust objects ‚Äî plot.sfclust","text":"x sfclust object containing clustering results, including cluster assignments model parameters. sample Integer specifying clustering sample number summarize. Defaults last sample. Integer vector indicating plot display. Options : - 1: Map regions colored cluster assignment. - 2: Functional shapes linear predictors cluster. - 3: Traceplot log marginal likelihood. clusters Optional vector specifying clusters plot. NULL, clusters included. sort Logical value indicating whether clusters relabeled based number elements. Default FALSE. legend Logical value indicating whether legend included plot. Default FALSE. ... Additional arguments passed underlying plotting functions.","code":""},{"path":"/reference/plot.sfclust.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot function for sfclust objects ‚Äî plot.sfclust","text":"composed patchwork object displaying selected subgraphs specified .","code":""},{"path":"/reference/print.sfclust.html","id":null,"dir":"Reference","previous_headings":"","what":"Print method for sfclust objects ‚Äî print.sfclust","title":"Print method for sfclust objects ‚Äî print.sfclust","text":"Prints details sfclust object, including () within-cluster formula; (ii) hyperparameters used MCMC sample number clusters penalty (q) movement probabilities (move_prob); (iii) number movement type dones MCMC sampling; (iv) log marginal likelihood model last clustering sample.","code":""},{"path":"/reference/print.sfclust.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Print method for sfclust objects ‚Äî print.sfclust","text":"","code":"# S3 method for class 'sfclust' print(x, ...)"},{"path":"/reference/print.sfclust.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Print method for sfclust objects ‚Äî print.sfclust","text":"x object class 'sfclust'. ... Additional arguments passed print.default.","code":""},{"path":"/reference/print.sfclust.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Print method for sfclust objects ‚Äî print.sfclust","text":"Invisibly returns input sfclust object x. function also prints summary : within-cluster model formula, clustering hyperparameters, movement counts MCMC sampler, log marginal likelihood selected sample.","code":""},{"path":"/reference/sfclust-package.html","id":null,"dir":"Reference","previous_headings":"","what":"sfclust: Bayesian Spatial Functional Clustering ‚Äî sfclust-package","title":"sfclust: Bayesian Spatial Functional Clustering ‚Äî sfclust-package","text":"sfclust package implements clustering algorithm proposed \"Bayesian Spatial Functional Data Clustering: Applications Disease Surveillance\", available https://arxiv.org/abs/2407.12633. package provides tools performing Bayesian spatial functional clustering, well methods diagnostic analysis, visualization, summarization results.","code":""},{"path":"/reference/sfclust-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"sfclust: Bayesian Spatial Functional Clustering ‚Äî sfclust-package","text":"Ruiman Zhong ruiman.zhong@kaust.edu.sa, Erick . Chac√≥n-Montalv√°n erick.chaconmontalvan@kaust.edu.sa, Paula Moraga paula.moraga@kaust.edu.sa","code":""},{"path":"/reference/sfclust.html","id":null,"dir":"Reference","previous_headings":"","what":"Bayesian spatial functional clustering ‚Äî sfclust","title":"Bayesian spatial functional clustering ‚Äî sfclust","text":"Bayesian detection neighboring spatial regions similar functional shapes using spanning trees latent Gaussian models. ensures spatial contiguity clusters, handles large family latent Gaussian models supported inla, allows work non-Gaussian likelihoods.","code":""},{"path":"/reference/sfclust.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Bayesian spatial functional clustering ‚Äî sfclust","text":"","code":"sfclust(   stdata,   graphdata = NULL,   stnames = c(\"geometry\", \"time\"),   move_prob = c(0.425, 0.425, 0.1, 0.05),   logpen = log(1 - 0.5),   correction = TRUE,   niter = 100,   burnin = 0,   thin = 1,   nmessage = 10,   path_save = NULL,   nsave = nmessage,   ... )"},{"path":"/reference/sfclust.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Bayesian spatial functional clustering ‚Äî sfclust","text":"stdata stars object containing response variables, covariates, necessary data. graphdata list containing initial graph used Bayesian model. include components like graph, mst, membership (default NULL). stnames character vector specifying spatio-temporal dimension names stdata represent spatial geometry time, respectively (default c(\"geometry\", \"time\")). move_prob numeric vector probabilities different types moves MCMC process: birth, death, change, hyperparameter moves (default c(0.425, 0.425, 0.1, 0.05)). logpen negative numeric value representing log-scale penalty increasing number clusters one. number clusters assumed follow geometric prior probability q, making penalty equal log(1 - q). example, logp = -50, proposal increases number clusters favored improves log marginal likelihood 50. correction logical indicating whether correction compute marginal likelihoods applied (default TRUE). depend type effect inclused INLA model. niter integer specifying number MCMC iterations perform (default 100). burnin integer specifying number burn-iterations discard (default 0). thin integer specifying thinning interval recording results (default 1). nmessage integer specifying often progress messages printed (default 10). path_save character string specifying file path save results (default NULL). nsave integer specifying number iterations saved results chain (default nmessage). ... Additional arguments formula, family, others passed inla function.","code":""},{"path":"/reference/sfclust.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Bayesian spatial functional clustering ‚Äî sfclust","text":"sfclust object containing two main lists: samples clust. samples list includes details sampling process, : membership: cluster membership assignments sample. log_marginal_likelihood: log marginal likelihood sample. move_counts: counts type move MCMC process. clust list contains information selected clustering, including: id: identifier selected sample (default last sample). membership: cluster assignments selected sample. models: fitted models cluster selected sample.","code":""},{"path":"/reference/sfclust.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Bayesian spatial functional clustering ‚Äî sfclust","text":"implementation draws inspiration methods described paper: \"Bayesian Clustering Spatial Functional Data Application Human Mobility Study COVID-19\" Bohai Zhang, Huiyan Sang, Zhao Tang Luo, Hui Huang, published Annals Applied Statistics, 2023. details methodology, please refer : paper: doi:10.1214/22-AOAS1643 Supplementary material: doi:10.1214/22-AOAS1643SUPPB MCMC algorithm implementation largely based supplementary material provided paper. However, generalized computation marginal likelihood ratio leveraging INLA (Integrated Nested Laplace Approximation). generalization enables integration parameters hyperparameters, allowing inference within broader family distribution functions model terms, thereby extending scope flexibility original approach. details approach can found paper \"Bayesian spatial functional data clustering: applications disease surveillance\" Ruiman Zhong, Erick . Chac√≥n-Montalv√°n, Paula Moraga: paper: https://arxiv.org/abs/2407.12633","code":""},{"path":"/reference/sfclust.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Bayesian spatial functional clustering ‚Äî sfclust","text":"Ruiman Zhong ruiman.zhong@kaust.edu.sa, Erick . Chac√≥n-Montalv√°n erick.chaconmontalvan@kaust.edu.sa, Paula Moraga paula.moraga@kaust.edu.sa","code":""},{"path":"/reference/sfclust.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Bayesian spatial functional clustering ‚Äî sfclust","text":"","code":"# \\donttest{ library(sfclust)  # Clustering with Gaussian data data(stgaus) result <- sfclust(stgaus, formula = y ~ f(idt, model = \"rw1\"),   niter = 10, nmessage = 1) #> Iteration 1: clusters = 10, births = 0, deaths = 0, changes = 0, hypers = 0, log_mlike = -1295.25479047453 #> Iteration 2: clusters = 9, births = 0, deaths = 1, changes = 0, hypers = 0, log_mlike = -1254.15931210354 #> Iteration 3: clusters = 9, births = 0, deaths = 1, changes = 0, hypers = 0, log_mlike = -1254.15931210354 #> Iteration 4: clusters = 10, births = 1, deaths = 1, changes = 0, hypers = 0, log_mlike = -1038.07773449202 #> Iteration 5: clusters = 10, births = 1, deaths = 1, changes = 0, hypers = 0, log_mlike = -1038.07773449202 #> Iteration 6: clusters = 11, births = 2, deaths = 1, changes = 0, hypers = 0, log_mlike = -886.210215998251 #> Iteration 7: clusters = 11, births = 2, deaths = 1, changes = 0, hypers = 1, log_mlike = -886.210215998251 #> Iteration 8: clusters = 11, births = 2, deaths = 1, changes = 0, hypers = 1, log_mlike = -886.210215998251 #> Iteration 9: clusters = 11, births = 2, deaths = 1, changes = 0, hypers = 1, log_mlike = -886.210215998251 #> Iteration 10: clusters = 11, births = 2, deaths = 1, changes = 0, hypers = 1, log_mlike = -886.210215998251 print(result) #> Within-cluster formula: #> y ~ f(idt, model = \"rw1\") #>  #> Clustering hyperparameters: #>   log(1-q)      birth      death     change      hyper  #> -0.6931472  0.4250000  0.4250000  0.1000000  0.0500000  #>  #> Clustering movement counts: #>  births  deaths changes  hypers  #>       2       1       0       1  #>  #> Log marginal likelihood (sample 10 out of 10): -886.2102 summary(result) #> Summary for clustering sample 10 out of 10  #>  #> Within-cluster formula: #> y ~ f(idt, model = \"rw1\") #>  #> Counts per cluster: #>  1  2  3  4  5  6  7  8  9 10 11  #> 80  1  1  5  2  1  1  1  5  2  1  #>  #> Log marginal likelihood:  -886.2102  plot(result)   # Clustering with binomial data data(stbinom) result <- sfclust(stbinom, formula = cases ~ poly(time, 2) + f(id),   family = \"binomial\", Ntrials = population, niter = 10, nmessage = 1) #> Warning: Log marginal-likelihood correction not required. #> Iteration 1: clusters = 9, births = 0, deaths = 1, changes = 0, hypers = 0, log_mlike = -76059.6237311878 #> Iteration 2: clusters = 9, births = 0, deaths = 1, changes = 1, hypers = 0, log_mlike = -75981.5138489285 #> Iteration 3: clusters = 9, births = 0, deaths = 1, changes = 1, hypers = 0, log_mlike = -75981.5138489285 #> Iteration 4: clusters = 9, births = 0, deaths = 1, changes = 1, hypers = 0, log_mlike = -75981.5138489285 #> Iteration 5: clusters = 9, births = 0, deaths = 1, changes = 1, hypers = 0, log_mlike = -75981.5138489285 #> Iteration 6: clusters = 9, births = 0, deaths = 1, changes = 1, hypers = 0, log_mlike = -75981.5138489285 #> Iteration 7: clusters = 10, births = 1, deaths = 1, changes = 1, hypers = 0, log_mlike = -75620.1013259778 #> Iteration 8: clusters = 10, births = 1, deaths = 1, changes = 1, hypers = 0, log_mlike = -75620.1013259778 #> Iteration 9: clusters = 10, births = 1, deaths = 1, changes = 1, hypers = 0, log_mlike = -75620.1013259778 #> Iteration 10: clusters = 10, births = 1, deaths = 1, changes = 1, hypers = 0, log_mlike = -75620.1013259778 print(result) #> Within-cluster formula: #> cases ~ poly(time, 2) + f(id) #>  #> Clustering hyperparameters: #>   log(1-q)      birth      death     change      hyper  #> -0.6931472  0.4250000  0.4250000  0.1000000  0.0500000  #>  #> Clustering movement counts: #>  births  deaths changes  hypers  #>       1       1       1       0  #>  #> Log marginal likelihood (sample 10 out of 10): -75620.1 summary(result) #> Summary for clustering sample 10 out of 10  #>  #> Within-cluster formula: #> cases ~ poly(time, 2) + f(id) #>  #> Counts per cluster: #>  1  2  3  4  5  6  7  8  9 10  #> 64  1  1  1  2  8  1  1 19  2  #>  #> Log marginal likelihood:  -75620.1  plot(result)  # }"},{"path":"/reference/stbinom.html","id":null,"dir":"Reference","previous_headings":"","what":"Spatio-temporal Binomial data ‚Äî stbinom","title":"Spatio-temporal Binomial data ‚Äî stbinom","text":"simulated stars object containing binomial response data functional clustering pattern defined polynomial fixed effects. dataset includes variables cases population observed across 100 simulated spatial regions 91 time points.","code":""},{"path":"/reference/stbinom.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Spatio-temporal Binomial data ‚Äî stbinom","text":"","code":"data(stbinom)"},{"path":"/reference/stbinom.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Spatio-temporal Binomial data ‚Äî stbinom","text":"stars object : cases Number observed cases (integer) population Population risk (integer) dimensions Two dimensions: geometry (spatial features) time (daily observations)","code":""},{"path":"/reference/stbinom.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Spatio-temporal Binomial data ‚Äî stbinom","text":"","code":"library(sfclust)  data(stbinom) stbinom #> stars object with 2 dimensions and 2 attributes #> attribute(s): #>              Min. 1st Qu.  Median     Mean 3rd Qu.  Max. #> cases        4632  9295.0 11760.5 11903.97 14238.0 26861 #> population  10911 18733.5 24255.0 23814.57 27517.5 44829 #> dimension(s): #>          from  to     offset  delta refsys point #> geometry    1 100         NA     NA     NA FALSE #> time        1  91 2024-01-01 1 days   Date FALSE #>                                                                 values #> geometry POLYGON ((59.5033 683.285...,...,POLYGON ((942.7562 116.89... #> time                                                              NULL plot(stbinom[\"cases\"]) #> Warning: plotting the first 9 out of 91 attributes; use max.plot = 91 to plot all"},{"path":"/reference/stgaus.html","id":null,"dir":"Reference","previous_headings":"","what":"Spatio-temporal Gaussian data ‚Äî stgaus","title":"Spatio-temporal Gaussian data ‚Äî stgaus","text":"simulated stars object containing Gaussian response data functional clustering pattern uging random walk processes. dataset includes response variable y observed across 100 simulated spatial regions 91 time points.","code":""},{"path":"/reference/stgaus.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Spatio-temporal Gaussian data ‚Äî stgaus","text":"","code":"data(stgaus)"},{"path":"/reference/stgaus.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Spatio-temporal Gaussian data ‚Äî stgaus","text":"stars object : y Response variable","code":""},{"path":"/reference/stgaus.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Spatio-temporal Gaussian data ‚Äî stgaus","text":"","code":"library(sfclust)  data(stgaus) stgaus #> stars object with 2 dimensions and 1 attribute #> attribute(s): #>         Min.    1st Qu.    Median          Mean   3rd Qu.     Max. #> y  -1.170275 -0.2390084 0.0302046 -0.0004274323 0.2095926 1.370593 #> dimension(s): #>          from  to     offset  delta refsys point #> geometry    1 100         NA     NA     NA FALSE #> time        1  91 2024-01-01 1 days   Date FALSE #>                                                                 values #> geometry POLYGON ((59.5033 683.285...,...,POLYGON ((942.7562 116.89... #> time                                                              NULL plot(stgaus[\"y\"]) #> Warning: plotting the first 9 out of 91 attributes; use max.plot = 91 to plot all"},{"path":"/reference/summary.sfclust.html","id":null,"dir":"Reference","previous_headings":"","what":"Summary method for sfclust objects ‚Äî summary.sfclust","title":"Summary method for sfclust objects ‚Äî summary.sfclust","text":"function summarizes cluster assignments desired clustering sample.","code":""},{"path":"/reference/summary.sfclust.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Summary method for sfclust objects ‚Äî summary.sfclust","text":"","code":"# S3 method for class 'sfclust' summary(object, sample = object$clust$id, sort = FALSE, ...)"},{"path":"/reference/summary.sfclust.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Summary method for sfclust objects ‚Äî summary.sfclust","text":"object object class 'sfclust'. sample integer specifying clustering sample number summarized (default last sample). sort Logical value indicating clusters relabel based number elements. ... Additional arguments passed print.default.","code":""},{"path":"/reference/summary.sfclust.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Summary method for sfclust objects ‚Äî summary.sfclust","text":"Invisibly returns table number regions cluster selected sample. function also prints summary includes: within-cluster model formula, total number MCMC clustering samples, cluster membership counts specified sample (optionally sorted), log marginal likelihood selected clustering sample.","code":""},{"path":"/reference/update.sfclust.html","id":null,"dir":"Reference","previous_headings":"","what":"Update MCMC Clustering Procedure ‚Äî update.sfclust","title":"Update MCMC Clustering Procedure ‚Äî update.sfclust","text":"function continues MCMC sampling sfclust object based previous results update model fitting specified sample clustering argument sample provided.","code":""},{"path":"/reference/update.sfclust.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Update MCMC Clustering Procedure ‚Äî update.sfclust","text":"","code":"# S3 method for class 'sfclust' update(   object,   niter = 100,   burnin = 0,   thin = 1,   nmessage = 10,   sample = NULL,   path_save = NULL,   nsave = nmessage,   ... )"},{"path":"/reference/update.sfclust.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Update MCMC Clustering Procedure ‚Äî update.sfclust","text":"object sfclust object. niter integer specifying number additional MCMC iterations perform. burnin integer specifying number burn-iterations discard. thin integer specifying thinning interval recording results. nmessage integer specifying number messages display process. sample integer specifying clustering sample number executed. default last sample (.e., nrow(x$samples$membership)). path_save character string specifying file path save results. NULL, results saved. nsave integer specifying often save results. Defaults nmessage. ... Additional arguments (currently used).","code":""},{"path":"/reference/update.sfclust.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Update MCMC Clustering Procedure ‚Äî update.sfclust","text":"updated sfclust object () new clustering samples sample specified, (ii) updated within-cluster model results sample given.","code":""},{"path":"/reference/update.sfclust.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Update MCMC Clustering Procedure ‚Äî update.sfclust","text":"function takes last state Markov chain previous sfclust execution uses starting point additional MCMC iterations. sample provided, simply udpates within-cluster models specified clustering sample.","code":""}]
